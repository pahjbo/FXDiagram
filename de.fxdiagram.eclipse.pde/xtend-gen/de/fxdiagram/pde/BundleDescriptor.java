package de.fxdiagram.pde;

import com.google.common.base.Objects;
import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.mapping.AbstractMappedElementDescriptor;
import de.fxdiagram.pde.BundleUtil;
import java.util.NoSuchElementException;
import javafx.beans.property.ReadOnlyStringProperty;
import javafx.beans.property.ReadOnlyStringWrapper;
import org.apache.log4j.Logger;
import org.eclipse.osgi.service.resolver.BundleDescription;
import org.eclipse.pde.core.plugin.IMatchRules;
import org.eclipse.pde.core.plugin.IPluginModelBase;
import org.eclipse.pde.core.plugin.PluginRegistry;
import org.eclipse.pde.internal.ui.editor.plugin.ManifestEditor;
import org.eclipse.ui.IEditorPart;
import org.eclipse.xtext.xbase.lib.Functions.Function1;

@ModelNode({ "symbolicName", "version" })
@SuppressWarnings("all")
public class BundleDescriptor extends AbstractMappedElementDescriptor<BundleDescription> {
  private static final Logger LOG = Logger.getLogger(BundleDescriptor.class);
  
  public BundleDescriptor(final String symbolicName, final String version, final String mappingConfigID, final String mappingID) {
    super(mappingConfigID, mappingID);
    this.symbolicNameProperty.set(symbolicName);
    this.versionProperty.set(version);
  }
  
  @Override
  public <U extends Object> U withDomainObject(final Function1<? super BundleDescription, ? extends U> lambda) {
    U _xblockexpression = null;
    {
      final BundleDescription bundle = BundleUtil.findBundle(this.getSymbolicName(), this.getVersion());
      if ((bundle == null)) {
        String _symbolicName = this.getSymbolicName();
        String _plus = ("Bundle " + _symbolicName);
        String _plus_1 = (_plus + " not found");
        throw new NoSuchElementException(_plus_1);
      }
      _xblockexpression = lambda.apply(bundle);
    }
    return _xblockexpression;
  }
  
  @Override
  public String getName() {
    return this.getSymbolicName();
  }
  
  public <U extends Object> U withPlugin(final Function1<? super IPluginModelBase, ? extends U> lambda) {
    U _xblockexpression = null;
    {
      final IPluginModelBase plugin = PluginRegistry.findModel(this.getSymbolicName(), this.getVersion(), IMatchRules.PERFECT, null);
      U _xifexpression = null;
      if ((plugin != null)) {
        _xifexpression = lambda.apply(plugin);
      } else {
        Object _xblockexpression_1 = null;
        {
          BundleDescriptor.LOG.warn(("Invalid BundleDescriptor " + this));
          _xblockexpression_1 = null;
        }
        _xifexpression = ((U)_xblockexpression_1);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  @Override
  public Object openInEditor(final boolean select) {
    final Function1<BundleDescription, IEditorPart> _function = (BundleDescription it) -> {
      IEditorPart _xblockexpression = null;
      {
        final IPluginModelBase plugin = PluginRegistry.findModel(it.getSymbolicName(), it.getVersion().toString(), IMatchRules.PERFECT, null);
        _xblockexpression = ManifestEditor.openPluginEditor(plugin);
      }
      return _xblockexpression;
    };
    return this.<IEditorPart>withDomainObject(_function);
  }
  
  @Override
  public boolean equals(final Object obj) {
    if ((obj instanceof BundleDescriptor)) {
      return ((super.equals(obj) && Objects.equal(((BundleDescriptor)obj).getSymbolicName(), this.getSymbolicName())) && Objects.equal(((BundleDescriptor)obj).getVersion(), this.getVersion()));
    } else {
      return false;
    }
  }
  
  @Override
  public int hashCode() {
    int _hashCode = super.hashCode();
    int _hashCode_1 = this.getSymbolicName().hashCode();
    int _multiply = (57 * _hashCode_1);
    int _plus = (_hashCode + _multiply);
    int _hashCode_2 = this.getVersion().hashCode();
    int _multiply_1 = (67 * _hashCode_2);
    return (_plus + _multiply_1);
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public BundleDescriptor() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
    modelElement.addProperty(symbolicNameProperty, String.class);
    modelElement.addProperty(versionProperty, String.class);
  }
  
  public void postLoad() {
    
  }
  
  public String toString() {
    return ToString.toString(this);
  }
  
  private ReadOnlyStringWrapper symbolicNameProperty = new ReadOnlyStringWrapper(this, "symbolicName");
  
  public String getSymbolicName() {
    return this.symbolicNameProperty.get();
  }
  
  public ReadOnlyStringProperty symbolicNameProperty() {
    return this.symbolicNameProperty.getReadOnlyProperty();
  }
  
  private ReadOnlyStringWrapper versionProperty = new ReadOnlyStringWrapper(this, "version");
  
  public String getVersion() {
    return this.versionProperty.get();
  }
  
  public ReadOnlyStringProperty versionProperty() {
    return this.versionProperty.getReadOnlyProperty();
  }
}
