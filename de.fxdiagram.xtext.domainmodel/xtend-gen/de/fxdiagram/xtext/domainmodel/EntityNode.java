package de.fxdiagram.xtext.domainmodel;

import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.XLabel;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.lib.nodes.RectangleBorderPane;
import de.fxdiagram.mapping.IMappedElementDescriptor;
import de.fxdiagram.mapping.reconcile.MappingLabelListener;
import de.fxdiagram.mapping.shapes.BaseNode;
import java.util.Collections;
import javafx.beans.property.ListProperty;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.paint.CycleMethod;
import javafx.scene.paint.LinearGradient;
import javafx.scene.paint.Stop;
import org.eclipse.xtext.example.domainmodel.domainmodel.Entity;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@ModelNode
@SuppressWarnings("all")
public class EntityNode extends BaseNode<Entity> {
  public static final String ENTITY_NAME = "entityName";
  
  public static final String ATTRIBUTE = "attribute";
  
  public static final String OPERATION = "operation";
  
  private VBox nameCompartment;
  
  private VBox attributeCompartment;
  
  private VBox operationsCompartment;
  
  public EntityNode(final IMappedElementDescriptor<Entity> descriptor) {
    super(descriptor);
  }
  
  @Override
  protected Node createNode() {
    RectangleBorderPane _xblockexpression = null;
    {
      RectangleBorderPane _rectangleBorderPane = new RectangleBorderPane();
      final Procedure1<RectangleBorderPane> _function = (RectangleBorderPane it) -> {
        Color _rgb = Color.rgb(158, 188, 227);
        Stop _stop = new Stop(0, _rgb);
        Color _rgb_1 = Color.rgb(220, 230, 255);
        Stop _stop_1 = new Stop(1, _rgb_1);
        LinearGradient _linearGradient = new LinearGradient(
          0, 0, 1, 1, 
          true, CycleMethod.NO_CYCLE, 
          Collections.<Stop>unmodifiableList(CollectionLiterals.<Stop>newArrayList(_stop, _stop_1)));
        it.setBackgroundPaint(_linearGradient);
        ObservableList<Node> _children = it.getChildren();
        VBox _vBox = new VBox();
        final Procedure1<VBox> _function_1 = (VBox it_1) -> {
          Insets _insets = new Insets(10, 20, 10, 20);
          it_1.setPadding(_insets);
          it_1.setSpacing(10);
          it_1.setAlignment(Pos.CENTER);
          ObservableList<Node> _children_1 = it_1.getChildren();
          VBox _vBox_1 = new VBox();
          final Procedure1<VBox> _function_2 = (VBox it_2) -> {
            it_2.setAlignment(Pos.CENTER);
          };
          VBox _doubleArrow = ObjectExtensions.<VBox>operator_doubleArrow(_vBox_1, _function_2);
          VBox _nameCompartment = (this.nameCompartment = _doubleArrow);
          _children_1.add(_nameCompartment);
          ObservableList<Node> _children_2 = it_1.getChildren();
          VBox _vBox_2 = new VBox();
          VBox _attributeCompartment = (this.attributeCompartment = _vBox_2);
          _children_2.add(_attributeCompartment);
          ObservableList<Node> _children_3 = it_1.getChildren();
          VBox _vBox_3 = new VBox();
          VBox _operationsCompartment = (this.operationsCompartment = _vBox_3);
          _children_3.add(_operationsCompartment);
        };
        VBox _doubleArrow = ObjectExtensions.<VBox>operator_doubleArrow(_vBox, _function_1);
        _children.add(_doubleArrow);
      };
      final RectangleBorderPane pane = ObjectExtensions.<RectangleBorderPane>operator_doubleArrow(_rectangleBorderPane, _function);
      ListProperty<XLabel> _labelsProperty = this.labelsProperty();
      Pair<String, Pane> _mappedTo = Pair.<String, Pane>of(EntityNode.ENTITY_NAME, this.nameCompartment);
      Pair<String, Pane> _mappedTo_1 = Pair.<String, Pane>of(EntityNode.ATTRIBUTE, this.attributeCompartment);
      Pair<String, Pane> _mappedTo_2 = Pair.<String, Pane>of(EntityNode.OPERATION, this.operationsCompartment);
      MappingLabelListener.<XLabel>addMappingLabelListener(_labelsProperty, _mappedTo, _mappedTo_1, _mappedTo_2);
      _xblockexpression = pane;
    }
    return _xblockexpression;
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public EntityNode() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
  }
  
  public void postLoad() {
    
  }
  
  public String toString() {
    return ToString.toString(this);
  }
}
